/*
 * Copyright (C) 2011-2020 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    
    include "user_types.h" /* buffer_t */
    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
    trusted{
	public void ecall_init(int mm,[in,size=17]char* ssk);//获取密钥sk和Label数量m
	public void ecall_update(int dnc);//读取密文并进行部分排序并发送给DN
	public void ecall_orderby();//最终排序
	public void ecall_output();//输出排序结果
    };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
	    void ocall_strcpy([out,size=DeLen] char *DeStr,[in,size=SoLen] char *SoStr,size_t DeLen,size_t SoLen);
        void ocall_sprintf([out,size=17]char *pt,int ipt);
        void ocall_input(int input);

        void ocall_opendn1sgx();
        int ocall_readdn1sgx([out,size=17]unsigned char *fres);
        void ocall_closedn1sgx();

        void ocall_opendn2sgx();
        int ocall_readdn2sgx([out,size=17]unsigned char *fres);
        void ocall_closedn2sgx();

        void ocall_opendn3sgx();
        int ocall_readdn3sgx([out,size=17]unsigned char *fres);
        void ocall_closedn3sgx();

        void ocall_opensgxdn1();
        void ocall_writesgxdn1([in,size=17]unsigned char *fres);
        void ocall_closesgxdn1();

         void ocall_opensgxdn2();
        void ocall_writesgxdn2([in,size=17]unsigned char *fres);
        void ocall_closesgxdn2();

         void ocall_opensgxdn3();
        void ocall_writesgxdn3([in,size=17]unsigned char *fres);
        void ocall_closesgxdn3();

        void ocall_openoutfile1();
        void ocall_writeoutfile1(int m1);
        void ocall_closeoutfile1();

        void ocall_openoutfile2();
        void ocall_writeoutfile2(int m2);
        void ocall_closeoutfile2();

        void ocall_openoutfile3();
        void ocall_writeoutfile3(int m3);
        void ocall_closeoutfile3();        

        void ocall_opendn1label();
        int ocall_readdn1label([out,size=17]unsigned char *fres);
        void ocall_closedn1label();

        void ocall_opendn2label();
        int ocall_readdn2label([out,size=17]unsigned char *fres);
        void ocall_closedn2label();

        void ocall_opendn3label();
        int ocall_readdn3label([out,size=17]unsigned char *fres);
        void ocall_closedn3label();        

        void ocall_openoutputfile();
        void ocall_writeoutputfile(int m);
        void ocall_writeoutputfile2([in,size=17]char *m);
        void ocall_closeoutputfile();          

        void ocall_startclock1();
        void ocall_endclock1();
        int ocall_time1();      

        void ocall_startclock();
        void ocall_endclock();
        int ocall_time();      
    };

};
